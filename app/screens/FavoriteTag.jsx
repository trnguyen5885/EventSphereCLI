import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  SafeAreaView,
  ScrollView,
  Alert,
  ActivityIndicator,
  StatusBar,
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import AxiosInstance from '../services/api/AxiosInstance';

const FavoriteTag = () => {
  const navigation = useNavigation();
  const [tags, setTags] = useState([]);
  const [selectedTags, setSelectedTags] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  // Mapping tags v·ªõi icon t∆∞∆°ng ·ª©ng
  const tagIcons = {
    "2025": "üéâ",
    "√¢m nh·∫°c": "üéµ",
    "·∫®m th·ª±c": "üçΩÔ∏è",
    "C·∫£i L∆∞∆°ng": "üé≠",
    "concert": "üé§",
    "Gia ƒë√¨nh": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
    "Gi·∫£i tr√≠": "üé™",
    "H√†i K·ªãch": "üòÇ",
    "H·ªôi ch·ª£": "üé™",
    "H·ªôi th·∫£o": "üìö",
    "K·ªãch": "üé≠",
    "K·ªãch thi·∫øu nhi": "üß∏",
    "L·ªÖ h·ªôi": "üéä",
    "live": "üì∫",
    "Ngh·ªá thu·∫≠t": "üé®",
    "rock": "üé∏",
    "S√¢n kh·∫•u k·ªãch": "üé¨",
    "S∆°n T√πng": "üé§",
    "Th·ªÉ thao": "‚öΩ",
    "Workshop": "üõ†Ô∏è"
  };

  // G·ªçi API ƒë·ªÉ l·∫•y danh s√°ch tags
  useEffect(() => {
    fetchTags();
  }, []);

  const fetchTags = async () => {
    try {
      setLoading(true);
      setError('');
      const axiosJWT = AxiosInstance();
      const res = await axiosJWT.get('tags/suggest');

      // API tr·∫£ v·ªÅ m·∫£ng string tr·ª±c ti·∫øp
      if (res.data) {
        console.log('Fetched tags:', res);
        setTags(res.data);
      } else {
        // Fallback data v·ªõi d·ªØ li·ªáu ch√≠nh x√°c t·ª´ API
        setTags([
          "2025", "√¢m nh·∫°c", "·∫®m th·ª±c", "C·∫£i L∆∞∆°ng", "concert",
          "Gia ƒë√¨nh", "Gi·∫£i tr√≠", "H√†i K·ªãch", "H·ªôi ch·ª£", "H·ªôi th·∫£o",
          "K·ªãch", "K·ªãch thi·∫øu nhi", "L·ªÖ h·ªôi", "live", "Ngh·ªá thu·∫≠t",
          "rock", "S√¢n kh·∫•u k·ªãch", "S∆°n T√πng", "Th·ªÉ thao", "Workshop"
        ]);
      }
    } catch (err) {
      console.error('Error fetching tags:', err);
      setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch th·ªÉ lo·∫°i');
      // S·ª≠ d·ª•ng d·ªØ li·ªáu ch√≠nh x√°c t·ª´ API l√†m fallback
      setTags([
        "2025", "√¢m nh·∫°c", "·∫®m th·ª±c", "C·∫£i L∆∞∆°ng", "concert",
        "Gia ƒë√¨nh", "Gi·∫£i tr√≠", "H√†i K·ªãch", "H·ªôi ch·ª£", "H·ªôi th·∫£o",
        "K·ªãch", "K·ªãch thi·∫øu nhi", "L·ªÖ h·ªôi", "live", "Ngh·ªá thu·∫≠t",
        "rock", "S√¢n kh·∫•u k·ªãch", "S∆°n T√πng", "Th·ªÉ thao", "Workshop"
      ]);
    } finally {
      setLoading(false);
    }
  };

  // X·ª≠ l√Ω ch·ªçn/b·ªè ch·ªçn tag
  const toggleTag = (tag) => {
    if (selectedTags.includes(tag)) {
      // B·ªè ch·ªçn tag
      setSelectedTags(selectedTags.filter(item => item !== tag));
    } else {
      // Ch·ªçn tag (ch·ªâ cho ph√©p ch·ªçn t·ªëi ƒëa 5)
      if (selectedTags.length < 5) {
        setSelectedTags([...selectedTags, tag]);
      } else {
        Alert.alert(
          'Th√¥ng b√°o',
          'B·∫°n ch·ªâ c√≥ th·ªÉ ch·ªçn t·ªëi ƒëa 5 th·ªÉ lo·∫°i y√™u th√≠ch',
          [{ text: 'OK' }]
        );
      }
    }
  };

  // X·ª≠ l√Ω n√∫t Ti·∫øp t·ª•c
  const handleContinue = () => {
    if (selectedTags.length !== 5) {
      Alert.alert(
        'Th√¥ng b√°o',
        'Vui l√≤ng ch·ªçn ƒë√∫ng 5 th·ªÉ lo·∫°i y√™u th√≠ch ƒë·ªÉ ti·∫øp t·ª•c',
        [{ text: 'OK' }]
      );
      return;
    }

    // C√≥ th·ªÉ l∆∞u selectedTags v√†o AsyncStorage ho·∫∑c context
    console.log('Selected tags:', selectedTags);

    // Navigate to Welcome screen
    navigation.navigate('Welcome');
  };

  if (loading) {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar barStyle="dark-content" backgroundColor="#FFFFFF" />
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#5669FF" />
          <Text style={styles.loadingText}>ƒêang t·∫£i...</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor="#FFFFFF" />

      {/* Header */}
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Ch·ªçn th·ªÉ lo·∫°i c·ªßa b·∫°n</Text>
        <Text style={styles.headerSubtitle}>
          D·ª±a tr√™n danh m·ª•c c·ªßa b·∫°n, ch√∫ng t√¥i s·∫Ω hi·ªÉn th·ªã cho b·∫°n c√°c ch·ªß ƒë·ªÅ li√™n quan
        </Text>
      </View>

      {/* Progress indicator */}
      <View style={styles.progressContainer}>
        <Text style={styles.progressText}>
          ƒê√£ ch·ªçn: {selectedTags.length}/5
        </Text>
        <View style={styles.progressBar}>
          <View
            style={[
              styles.progressFill,
              { width: `${(selectedTags.length / 5) * 100}%` }
            ]}
          />
        </View>
      </View>

      {/* Tags Grid */}
      <ScrollView
        style={styles.scrollView}
        showsVerticalScrollIndicator={false}
        contentContainerStyle={styles.scrollContent}
      >
        {error ? (
          <View style={styles.errorContainer}>
            <Text style={styles.errorText}>{error}</Text>
            <TouchableOpacity style={styles.retryButton} onPress={fetchTags}>
              <Text style={styles.retryButtonText}>Th·ª≠ l·∫°i</Text>
            </TouchableOpacity>
          </View>
        ) : (
          <View style={styles.tagsGrid}>
            {tags.map((tag, index) => (
              <TouchableOpacity
                key={index}
                style={[
                  styles.tagItem,
                  selectedTags.includes(tag) && styles.tagItemSelected
                ]}
                onPress={() => toggleTag(tag)}
                activeOpacity={0.7}
              >
                <Text style={styles.tagIcon}>
                  {tagIcons[tag] || "üéØ"}
                </Text>
                <Text style={[
                  styles.tagText,
                  selectedTags.includes(tag) && styles.tagTextSelected
                ]}>
                  {tag}
                </Text>
              </TouchableOpacity>
            ))}
          </View>
        )}
      </ScrollView>

      {/* Continue Button */}
      <View style={styles.bottomContainer}>
        <TouchableOpacity
          style={[
            styles.continueButton,
            selectedTags.length === 5 && styles.continueButtonActive
          ]}
          onPress={handleContinue}
          disabled={selectedTags.length !== 5}
          activeOpacity={0.8}
        >
          <Text style={[
            styles.continueButtonText,
            selectedTags.length === 5 && styles.continueButtonTextActive
          ]}>
            Ti·∫øp t·ª•c
          </Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: '#5669FF',
    fontWeight: '500',
  },
  header: {
    paddingHorizontal: 20,
    paddingTop: 10,
    paddingBottom: 20,
    backgroundColor: '#FFFFFF',
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1A1A1A',
    marginBottom: 8,
  },
  headerSubtitle: {
    fontSize: 14,
    color: '#666666',
    lineHeight: 20,
  },
  progressContainer: {
    paddingHorizontal: 20,
    paddingBottom: 15,
    backgroundColor: '#FFFFFF',
  },
  progressText: {
    fontSize: 14,
    color: '#5669FF',
    fontWeight: '600',
    marginBottom: 8,
  },
  progressBar: {
    height: 4,
    backgroundColor: '#F0F0F0',
    borderRadius: 2,
    overflow: 'hidden',
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#5669FF',
    borderRadius: 2,
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    paddingHorizontal: 20,
    paddingBottom: 20,
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 20,
  },
  errorText: {
    fontSize: 16,
    color: '#FF6B6B',
    textAlign: 'center',
    marginBottom: 15,
  },
  retryButton: {
    backgroundColor: '#5669FF',
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 8,
  },
  retryButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  tagsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  tagItem: {
    width: '48%',
    backgroundColor: '#F8F9FA',
    borderRadius: 16,
    paddingVertical: 20,
    paddingHorizontal: 16,
    marginBottom: 12,
    alignItems: 'center',
    justifyContent: 'center',
    minHeight: 80,
    borderWidth: 2,
    borderColor: 'transparent',
  },
  tagItemSelected: {
    backgroundColor: '#5669FF',
    borderColor: '#5669FF',
  },
  tagIcon: {
    fontSize: 24,
    marginBottom: 8,
  },
  tagText: {
    fontSize: 14,
    color: '#1A1A1A',
    fontWeight: '500',
    textAlign: 'center',
  },
  tagTextSelected: {
    color: '#FFFFFF',
  },
  bottomContainer: {
    paddingHorizontal: 20,
    paddingVertical: 20,
    backgroundColor: '#FFFFFF',
    borderTopWidth: 1,
    borderTopColor: '#F0F0F0',
  },
  continueButton: {
    backgroundColor: '#E8E8E8',
    paddingVertical: 16,
    borderRadius: 12,
    alignItems: 'center',
  },
  continueButtonActive: {
    backgroundColor: '#5669FF',
  },
  continueButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#999999',
  },
  continueButtonTextActive: {
    color: '#FFFFFF',
  },
});

export default FavoriteTag;